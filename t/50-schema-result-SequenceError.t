use strict;
use warnings;
use Test::More tests => 14;
use Test::Exception;
use Moose::Meta::Class;
use JSON;

use npg_testing::db;
use t::autoqc_util;

use_ok('npg_qc::Schema::Result::SequenceError');

my $schema = Moose::Meta::Class->create_anon_class(
          roles => [qw/npg_testing::db/])
          ->new_object({})->create_test_db(q[npg_qc::Schema]);

my $json = q { 
{"reverse_count":[9908,9908,9908,9908,9907,9908,9908,9908,9908,9908,9906,9908,9908,9908,9906,9908,9907,9908,9908,9908,9908,9908,9908,9907,9906,9908,9908,9908,9908,9908,9907,9906,9907,9907,9906,9905,9906,9905,9906,9907,9907,9907,9906,9907,9908,9906,9906,9908,9908,9907,9907,9906,9905,9906,9908,9908,9908,9908,9907,9907,9906,9907,9907,9907,9908,9907,9906,9905,9905,9906,9907,9907,9908,9908,9908],
"reverse_n_count":[9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
"reverse_aligned_read_count":9908,"position":"1","quality_bin_values":["31","30","15"],
"forward_read_filename":"9225_1_1#93.fastq","reference":"/lustre/scratch109/srpipe/references/Homo_sapiens/1000Genomes_hs37d5/all/bwa/hs37d5.fa",
"reverse_quality_bins":[[0,19,17,10,17,11,11,8,18,9,10,9,6,7,13,8,10,13,4,11,10,7,12,7,10,9,12,8,6,4,7,11,9,11,10,7,12,15,13,8,10,7,13,10,14,11,14,11,7,13,12,15,9,11,13,11,10,14,16,15,17,8,8,12,12,11,10,18,13,14,10,13,12,14,17],[22,0,1,2,2,2,3,1,2,6,0,2,3,0,3,2,3,2,3,2,1,2,3,3,6,1,1,3,1,6,0,7,2,6,0,6,3,6,4,3,7,3,11,8,10,5,3,6,7,4,6,3,4,1,9,4,4,4,3,3,8,8,4,7,7,6,14,8,4,8,6,11,12,8,14],[3,6,5,3,4,5,19,4,3,4,6,6,5,2,5,6,7,4,5,5,5,7,4,10,5,12,9,8,6,8,7,9,14,12,20,9,13,16,16,12,12,20,14,15,14,11,17,18,20,18,13,17,15,14,16,19,15,11,18,8,17,21,26,26,14,31,14,18,24,26,19,30,19,29,31]],
"forward_aligned_read_count":9937,
"forward_count":[9937,9937,9937,9936,9936,9937,9937,9937,9937,9937,9937,9937,9936,9937,9937,9937,9937,9937,9937,9936,9937,9937,9936,9937,9937,9937,9936,9937,9936,9936,9936,9936,9935,9935,9936,9936,9936,9935,9937,9936,9936,9937,9936,9937,9936,9937,9937,9937,9936,9937,9935,9936,9937,9937,9937,9937,9937,9936,9935,9937,9937,9935,9937,9937,9936,9936,9936,9937,9937,9937,9937,9937,9937,9937,9937],
"forward_common_cigars":[["75M",9882],["9M1D66M",2],["23M1D52M",2],["48M1D27M",2],["50M1I24M",2]],
"info":{"Check":"npg_qc::autoqc::checks::sequence_error","Aligner":"/software/solexa/bin/bwa","Aligner_version":"0.5.9-r16","Check_version":"16569","Aligner_options":"-n 60"},
"pass":1,
"forward_quality_bins":[[13,10,19,15,7,17,5,7,12,14,15,10,11,11,7,17,14,13,8,12,6,5,16,8,8,6,12,8,11,8,12,11,11,9,8,11,11,16,9,8,9,16,9,9,12,10,15,15,8,12,10,11,12,8,14,15,6,15,14,12,9,13,12,5,10,8,11,14,13,15,15,16,15,12,19],[3,3,2,5,7,2,1,3,1,3,2,2,2,0,5,2,2,0,2,4,5,1,3,1,1,3,5,2,1,4,2,4,2,2,3,4,2,7,2,3,3,5,7,1,3,0,3,2,2,2,1,0,1,1,6,5,3,2,8,1,2,2,3,3,6,5,4,2,3,1,5,7,7,13,12],[4,0,0,0,1,6,1,7,1,2,0,1,0,0,0,0,2,2,2,1,2,0,28,1,0,6,2,8,6,3,3,7,13,10,8,5,7,7,11,8,13,11,5,8,9,9,11,6,10,13,7,13,11,7,12,10,7,13,9,7,16,8,17,9,15,14,31,15,22,12,13,41,19,16,27]],
"forward_cigar_char_count_by_cycle":{"H":null,"S":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],"M":[9937,9937,9937,9936,9936,9937,9937,9937,9936,9935,9937,9937,9935,9936,9937,9937,9936,9937,9936,9935,9936,9936,9935,9935,9937,9936,9936,9936,9936,9936,9936,9936,9931,9933,9936,9934,9935,9935,9936,9936,9935,9937,9935,9937,9935,9937,9937,9937,9934,9937,9933,9934,9937,9937,9937,9937,9936,9936,9934,9937,9937,9933,9936,9937,9936,9936,9936,9936,9936,9937,9937,9936,9937,9937,9936],"D":[0,0,0,0,0,0,0,0,1,2,0,0,1,1,0,0,1,0,1,1,1,1,1,2,0,1,0,1,0,0,0,0,4,2,0,2,1,0,1,0,1,0,1,0,1,0,0,0,2,0,2,2,0,0,0,0,1,0,1,0,0,2,1,0,0,0,0,1,1,0,0,1,0,0,0],"N":null,"I":[0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,1,1,1,2,2,1,1,1,2,0,1,1,0,1,0,1,0,0,0,1,0,2,1,0,0,0,0,0,1,2,0,0,2,0,0,1,1,1,0,0,0,0,0,0,0,0],"P":null},
"reverse_cigar_char_count_by_cycle":{"H":null,"S":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,5,5],"M":[9908,9908,9908,9908,9907,9908,9908,9908,9908,9908,9905,9908,9908,9908,9906,9907,9907,9907,9908,9906,9907,9908,9906,9906,9905,9907,9908,9908,9908,9908,9907,9904,9905,9907,9905,9905,9906,9904,9906,9906,9905,9905,9905,9906,9906,9906,9903,9907,9908,9906,9905,9906,9903,9903,9908,9907,9906,9908,9906,9906,9902,9907,9907,9907,9907,9907,9904,9903,9904,9905,9906,9905,9906,9903,9903],"D":[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,2,1,0,2,1,1,1,0,0,0,0,0,2,2,0,1,0,0,1,0,1,2,2,1,1,2,0,3,1,0,1,2,0,2,3,0,1,2,0,1,1,4,0,0,0,1,0,2,1,0,0,0,0,0,0,0],"N":null,"I":[0,0,0,0,1,0,0,0,0,0,2,0,0,0,2,0,1,0,0,0,0,0,0,1,2,0,0,0,0,0,1,2,1,1,2,3,2,3,2,1,1,1,2,1,0,2,2,0,0,1,1,2,3,2,0,0,0,0,1,1,2,1,1,1,0,1,2,3,3,2,1,1,0,0,0],"P":null},
"sample_size":10000,"path":"/nfs/sf19/ILorHSany_sf19/analysis/130125_HS23_09225_B_C1CBDACXX/Data/Intensities/BAM_basecalls_20130203-192218/PB_cal_bam/archive/lane1","id_run":"9225",
"reverse_errors":[34,25,23,15,23,18,33,13,23,19,16,17,14,9,21,17,20,19,12,18,16,16,19,20,21,22,22,19,13,18,14,27,25,29,30,22,28,37,33,23,29,30,38,33,38,27,34,35,34,35,31,35,28,26,38,34,29,29,37,26,42,37,38,45,33,48,38,44,41,48,35,54,43,51,63],
"tag_index":"93",
"forward_errors":[21,13,21,24,18,25,7,17,14,19,17,13,13,11,12,19,18,15,12,17,13,6,49,10,9,15,19,18,18,15,17,22,29,24,19,20,20,31,22,23,28,32,21,18,24,19,29,23,20,28,18,25,24,16,32,30,16,30,31,20,27,23,33,18,32,27,47,34,38,28,33,65,45,43,65],
"forward_n_count":[1,0,0,4,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,3,3,0,0,0,1,0,4,3,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,3,0,0,0,1,4,2,7],
"reverse_read_filename":"9225_1_2#93.fastq",
"reverse_common_cigars":[["75M",9848],["45M1I29M",2],["44M1D31M",2],["46M1I28M",2],["14M1I60M",2]]}
};

my $values = from_json($json);
$values->{'id_seq_composition'} =
  t::autoqc_util::find_or_save_composition($schema,
    {id_run => 9225, position => 1, tag_index => 93});
my $rs = $schema->resultset('SequenceError');
isa_ok($rs->new_result($values), 'npg_qc::Schema::Result::SequenceError');

{
  my %values1 = %{$values};
  my $v1 = \%values1;
  lives_ok {$rs->find_or_new($v1)->set_inflated_columns($v1)->update_or_insert()} 'tag record inserted';
  my $rs1 = $rs->search({});
  is ($rs1->count, 1, q[one row created in the table]);
  my $row = $rs1->next;
  is($row->tag_index, 93, 'tag index retrieved correctly');
  is(ref $row->reverse_cigar_char_count_by_cycle, 'HASH',
    'reverse_cigar_char_count_by_cycle returned as hash ref');
  is_deeply($row->reverse_cigar_char_count_by_cycle,
    $values->{'reverse_cigar_char_count_by_cycle'},
    'reverse_cigar_char_count_by_cycle hash content is correct');

  %values1 = %{$values};
  $v1 = \%values1;
  delete $v1->{'id_run'};
  delete $v1->{'position'};
  delete $v1->{'tag_index'};
  my $row1;
  lives_ok {$row1 = $rs->find_or_new($v1)->set_inflated_columns($v1)->update_or_insert()}
    'another or the same row?';
  is ($row->id_sequence_error, $row1->id_sequence_error, 'new row is not created');

  %values1 = %{$values};
  $v1 = \%values1;
  delete $v1->{'id_run'};
  delete $v1->{'position'};
  delete $v1->{'tag_index'};
  $v1->{'id_seq_composition'} =
  t::autoqc_util::find_or_save_composition($schema,
    {id_run => 9225, position => 1, tag_index => 96});
  lives_ok {$row1 = $rs->find_or_new($v1)->set_inflated_columns($v1)->update_or_insert()}
    'another row';
  isnt ($row->id_sequence_error, $row1->id_sequence_error, 'new row is created');
  is ($row1->id_run, undef, 'id run value is undefined');
  is ($row1->position, undef, 'position value is undefined');
  is ($row1->tag_index, undef, 'tag_index value is undefined');
}
1;


